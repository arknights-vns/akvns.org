// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id
    name          String
    email         String
    emailVerified Boolean   @default(false)
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @default(now()) @updatedAt
    sessions      Session[]
    accounts      Account[]

    role       String?
    banned     Boolean?  @default(false)
    banReason  String?
    banExpires DateTime?

    @@unique([email])
    @@index([email])
    @@map("user")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    impersonatedBy String?

    @@unique([token])
    @@index([userId, token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    @@index([userId])
    @@map("account")
}

model Verification {
    id         String   @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now()) @updatedAt

    @@index([identifier])
    @@map("verification")
}

enum ProjectType {
    FAN_PROJECT
    EVENT
    CROSSOVER
}

model Project {
    id          String      @id
    title       String
    type        ProjectType @default(EVENT)
    mainImg     String
    date        DateTime    @default(now())
    description String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    @@index([title, type, date])
    @@map("project")
}

enum QuestionType {
    SLIDER
    MULTI_CHOICE
    BOOL
    IMG_REGION
}

model QuestionSet {
    id        String     @id
    title     String
    //pls add more stuff here idk
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Question  Question[]

    @@index([title])
    @@map("questionSet")
}

model Question {
    id                  String               @id
    questionSet         QuestionSet          @relation(fields: [questionSetId], references: [id])
    questionSetId       String
    type                QuestionType         @default(MULTI_CHOICE)
    questionText        String               @default("Khi nào bán tus?")
    response            SliderResponse?      @relation() //either figure out multi-type response (which, high chance no), or
    //"hay là mình store đại response bằng JSON vào một field, rồi validate bên server đi"
    responseId          String               @unique
    sliderResponseId    String
    ImgResponse         ImgResponse[]
    BoolResponse        BoolResponse?
    MultiChoiceResponse MultiChoiceResponse?

    @@map("question")
}

// Remove if we *do* switch to JSON-in-a-field
model SliderResponse {
    id         String   @id
    question   Question @relation(fields: [questionId], references: [id])
    questionId String   @unique
    upper      Float
    lower      Float
}

model ImgResponse {
    id         String   @id
    question   Question @relation(fields: [questionId], references: [id]) //fill in relation, if any
    questionId String   @unique //^
    imgUrl     String
    //pos1 and pos2, diagonally, in pixel pairs
    pos1X      Int
    pos1Y      Int
    pos2X      Int
    pos2Y      Int
}

model BoolResponse {
    id         String   @id
    question   Question @relation(fields: [questionId], references: [id]) //fill in relation, if any
    questionId String   @unique //^
    ans        Boolean
}

model MultiChoiceResponse {
    id         String   @id
    question   Question @relation(fields: [questionId], references: [id]) //fill in relation, if any
    questionId String   @unique //^
    //food for thought: image region answer, do we want a pos1 and pos2 (like WorldEdit)
    //or just "one point and take a radius/area of n pixels" of that point
    ansNum     String
    ans1       String
    ans2       String
    ans3       String
    ans4       String
}

//End of removal

model ComicSeries {
    id    String  @id
    name  String
    Comic Comic[]
}

enum TransType {
    VNS_TRANSLATION
    PARTNER_TRANSLATION
    COLLAB_TRANSLATION
}

model Comic {
    //intention is that each comic will have its own S3 bucket, so might as well use the ID for it idk?
    id         String       @id
    title      String
    author     String
    series     ComicSeries? @relation(fields: [seriesId], references: [id])
    seriesId   String
    transType  TransType    @default(VNS_TRANSLATION)
    translator String? //Do we want to add a list of translators?
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt

    @@index([title, createdAt, updatedAt])
}
